"""Programacao_Aplicada_I.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1YSt8VBDJgZHfgVauF_PeTa8S8yPPkfSp
"""
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterBoolean,
                       QgsRasterLayer,
                       QgsProcessingException,
                       QgsProcessingUtils)
from qgis import processing
class TrafegabilidadeAlgorithm(QgsProcessingAlgorithm):
    #Definindo os identificadores de seus parâmetros input e output
    VIA_DESLOCAMENTO = 'infra_via_deslocamento_l'
    DIST_BUFFER_VIA = 'DIST_BUFFER_VIA'
    VEGETACAO = 'cobter_vegetacao_a'
    MASSA_DAGUA = 'cobert_massa_dagua_a'
    TRECHO_DRENAGEM = 'elemnat_trecho_drenagem_l'
    DIST_BUFFER_TRECHO = 'DIST_BUFFER_TRECHO'
    DIST_BUFFER_MATA_CILIAR = 'DIST_BUFFER_MATA_CILIAR'
    AREA_CONSTRUIDA = 'cobert_area_construida_a'
    AREA_SEM_DADOS = 'area_sem_dados_a'
    PIXEL_SIZE = 'PIXEL_SIZE'
    MDT = 'MDT'
    OUTPUT = 'OUTPUT'
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
    def createInstance(self):
        return TrafegabilidadeAlgorithm()
    def name(self):
        return 'cartadetrafegabilidade'
    def displayName(self):
        return self.tr('Carta de Trafegabilidade')
    def group(self):
        return self.tr('Exemplos')
    def groupId(self):
        return 'exemplos'
    def initAlgorithm(self, config=None):
        #Parâmetros já fornecidos
        self.addParameter(QgsProcessingParameterFeatureSource(self.VIA_DESLOCAMENTO,
                                                              self.tr('Via de Deslocamento'),
                                                              [QgsProcessing.TypeVectorLine]))
        self.addParameter(QgsProcessingParameterNumber(self.DIST_BUFFER_VIA,
                                                       self.tr('Distância de Buffer para Via de Deslocamento'),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=10))
        #Adicionar camada vetorial de vegetação
        self.addParameter(QgsProcessingParameterFeatureSource(self.VEGETACAO,
                                                              self.tr('cobter_vegetacao_a'),
                                                              [QgsProcessing.TypeVectorPolygon]))
        #Adicionar camada vetorial de massa d'água
        self.addParameter(QgsProcessingParameterFeatureSource(self.MASSA_DAGUA,
                                                              self.tr('Massa d\'água'),
                                                              [QgsProcessing.TypeVectorPolygon]))
        #Adicionar camada vetorial de trecho de drenagem
        self.addParameter(QgsProcessingParameterFeatureSource(self.TRECHO_DRENAGEM,
                                                              self.tr('Trecho de Drenagem'),
                                                              [QgsProcessing.TypeVectorLine]))
        #Distância de buffer para trecho de drenagem
        self.addParameter(QgsProcessingParameterNumber(self.DIST_BUFFER_TRECHO,
                                                       self.tr('Distância de Buffer para Trecho de Drenagem'),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=5))
        #Distância de buffer para mata ciliar
        self.addParameter(QgsProcessingParameterNumber(self.DIST_BUFFER_MATA_CILIAR,
                                                       self.tr('Distância de Buffer para Mata Ciliar'),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=5))
        #Adicionar camada vetorial de área construída
        self.addParameter(QgsProcessingParameterFeatureSource(self.AREA_CONSTRUIDA,
                                                              self.tr('Área Construída'),
                                                              [QgsProcessing.TypeVectorPolygon]))
        #Adicionar camada vetorial de área sem dados
        self.addParameter(QgsProcessingParameterFeatureSource(self.AREA_SEM_DADOS,
                                                              self.tr('Área Sem Dados'),
                                                              [QgsProcessing.TypeVectorPolygon], optional=True))
        #Tamanho do pixel do raster de saída
        self.addParameter(QgsProcessingParameterNumber(self.PIXEL_SIZE,
                                                       self.tr('Tamanho do Pixel do Raster de Saída'),
                                                       QgsProcessingParameterNumber.Double,
                                                       defaultValue=10))
        #Camada raster do Modelo Digital de Terreno (MDT)
        self.addParameter(QgsProcessingParameterRasterLayer(self.MDT,
                                                            self.tr('Modelo Digital de Terreno')))
        #Definir a saída do raster
        self.addParameter(QgsProcessingParameterRasterDestination(self.OUTPUT,
                                                                  self.tr('Carta de Trafegabilidade')))


    def processAlgorithm(self, parameters, context, feedback):
        via_deslocamento = self.parameterAsVectorLayer(parameters, self.VIA_DESLOCAMENTO, context)
        vegetacao = self.parameterAsVectorLayer(parameters, self.VEGETACAO, context)
        massa_dagua = self.parameterAsVectorLayer(parameters, self.MASSA_DAGUA, context)
        DRENAGEM = self.parameterAsVectorLayer(parameters, self.TRECHO_DRENAGEM, context)
        contruida = self.parameterAsVectorLayer(parameters, self.AREA_CONSTRUIDA, context)
        sem_dados = self.parameterAsVectorLayer(parameters, self.AREA_SEM_DADOS, context)

        #Preparação de camadas intermédias

        expressao_filtro = "\"administracao\" = 'Desconhecida'"

        via_deslocamento_filtrada = processing.run("native:extractbyexpression", {
            'INPUT': parameters[self.VIA_DESLOCAMENTO],
            'EXPRESSION': expressao_filtro,
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        via_deslocamento_filtrada_desc = processing.run("qgis:extractbyexpression", {
            'INPUT': parameters[self.VEGETACAO],
            'EXPRESSION': "\"tipo\" = 0",
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        floresta_densa_esparsa = processing.run("qgis:extractbyexpression", {
            'INPUT': parameters[self.VEGETACAO],
            'EXPRESSION': "\"tipo\" = 601 OR \"tipo\" = 602",
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        vegetacao_restritiva = processing.run("qgis:extractbyexpression", {
            'INPUT': parameters[self.VEGETACAO],
            'EXPRESSION': "\"tipo\" != 601 AND \"tipo\" != 602 AND \"tipo\" != 1000",
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        terreno_exposto_desconhecido = processing.run("qgis:extractbyexpression", {
            'INPUT': parameters[self.VEGETACAO],
            'EXPRESSION': "\"tipo\" = 1000",
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']


        buffer_via_deslocamento_filtrada_desc = processing.run("native:buffer", {
            'INPUT': via_deslocamento_filtrada_desc,
            'DISTANCE': parameters[self.DIST_BUFFER_VIA],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        buffer_via_deslocamento = processing.run("native:buffer", {
            'INPUT': via_deslocamento,
            'DISTANCE': parameters[self.DIST_BUFFER_VIA],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']


        buffer_via_deslocamento_filtrofedest = processing.run("native:buffer", {
            'INPUT': via_deslocamento_filtrada,
            'DISTANCE': parameters[self.DIST_BUFFER_VIA],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        buffer_vegetacao_restritiva = processing.run("native:buffer", {
            'INPUT': vegetacao_restritiva,
            'DISTANCE': parameters[self.DIST_BUFFER_MATA_CILIAR],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        buffer_floresta_densa_esparsa = processing.run("native:buffer", {
            'INPUT': floresta_densa_esparsa,
            'DISTANCE': parameters[self.DIST_BUFFER_MATA_CILIAR],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        buffer_terreno_exposto_desconhecido = processing.run("native:buffer", {
            'INPUT': terreno_exposto_desconhecido,
            'DISTANCE': parameters[self.DIST_BUFFER_MATA_CILIAR],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        buffer_mata_ciliar = processing.run("native:buffer", {
            'INPUT': vegetacao,
            'DISTANCE': parameters[self.DIST_BUFFER_MATA_CILIAR],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        
        buffer_trecho_drenagem = processing.run("native:buffer", {
            'INPUT': DRENAGEM,
            'DISTANCE': parameters[self.DIST_BUFFER_TRECHO],
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        # Classificação das áreas
        camadas_impeditivas = [buffer_floresta_densa_esparsa, massa_dagua, buffer_trecho_drenagem, buffer_mata_ciliar]  
        camada_impeditiva_combinada = processing.run("qgis:mergevectorlayers", {
            'LAYERS': camadas_impeditivas,
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']

        camadas_restritivo = [vegetacao, contruida, buffer_via_deslocamento]  # Substitua pelos nomes corretos das suas variáveis
        
        camadas_restritivo = [buffer_vegetacao_restritiva, contruida, buffer_via_deslocamento_filtrofedest]  
        camada_restritivo_combinada = processing.run("qgis:mergevectorlayers", {
            'LAYERS': camadas_restritivo,
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']
        camadas_adequado = [vegetacao, via_deslocamento]  # Substitua pelos nomes corretos das suas variáveis
        camadas_adequado = [buffer_terreno_exposto_desconhecido, via_deslocamento_filtrada_desc]  
        camada_adequado_combinada = processing.run("qgis:mergevectorlayers", {
            'LAYERS': camadas_adequado,
            'OUTPUT': 'memory:'
        }, context=context, feedback=feedback)['OUTPUT']
        camadas_desconhecido = [sem_dados]  # Substitua pelos nomes corretos das suas variáveis
        camadas_desconhecido = [sem_dados]  
        camada_desconhecido_combinada = processing.run("qgis:mergevectorlayers", {
            'LAYERS': camadas_desconhecido,
            'OUTPUT': 'memory:'})

#Fechar dataset
out_band.FlushCache()
out_ds = None
